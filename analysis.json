{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "Variable editor allows to edit variables in actions editor.\n\n### Styling\n\n`<condition-operator-dropdown>` provides the following custom properties and\nmixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--condition-operator-dropdown` | Mixin applied to the element | `{}`\n`--condition-operator-dropdown-background-color` | Background color of the\neditor | `rgba(0, 162, 223, 0.05)`",
      "summary": "",
      "path": "condition-operator-dropdown.js",
      "properties": [
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "Renders the editor in read only mode",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 6
            },
            "end": {
              "line": 84,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 40,
          "column": 0
        },
        "end": {
          "line": 87,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "UiElements.ConditionOperatorDropdown",
      "attributes": [
        {
          "name": "readonly",
          "description": "Renders the editor in read only mode",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 6
            },
            "end": {
              "line": 84,
              "column": 23
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "condition-operator-dropdown",
      "mixins": [
        "Polymer.IronFormElementBehavior"
      ]
    },
    {
      "description": "An editor for request / response editors.\nIt creates data model that is accetable in ARC elements ecosystem for conditions.\n\n### Data model\n\nCondition data model is:\n\n```javascript\n{\n  source: 'String', // See below for detailed description.\n  operator: 'String', // see below for list of all operators\n  condition: 'any' // value to use to compare the value get from the action `source` property\n}\n```\n\n#### source\n\nInstructs the condition runner from where to take the value for the condition.\nGeneral structure is:\n\n```\nsource object . data type [. path]\n```\n\nSource object can be either `request` or `response`.\n\nData type describes type of the request / response data. Can be one of:\n\n- url - URL associated with the request / response\n- status - Only for response data source object. Response's status code.\n- header - Request / response headers\n- body - Request / response body\n\nPath allows to instruct the runner from where specifically in the data type get the value.\n\nFor `url` you can define the following properties:\n- host - Returns the host value, e.g. `api.domain.com`\n- protocol - Returns URL protocol, e.g. `https:`\n- path - URL's path, e.g. `/path/to/resource.json`\n- query - Returns full query string, e.g. `version=1&page=test`\n- query.[any string] - Returns the value of a query parameter. For `query.version` it would return `1`\n- hash - Returns everything that is after the `#` character, e.g. `access_token=token&state=A6RT7W`\n- hast.[any string] - It treats hash as a query parameters and returns the value of the parameter. For `hash.access_token` it would return `token`\n\nFor `body` you can define path to the value for XML and JSON data only.\nAny other content type will result with `undefined` value.\n\n#### operator\n\nOperator can be one of:\n- equal\n- not-equal\n- greater-than\n- greater-than-equal\n- less-than\n- less-than-equal\n- contains\n\nContains can operate on strings, simple arrays (e.g. `['test', 123]`) or objects (e.g. {'key':'value'}).\n\n### Example\n\n```javascript\nconst config = {\n  source: 'request.body.items.0.name',\n  action: 'assign-variable',\n  destination: 'someValue',\n  conditions: [{\n    source: 'response.status',\n    operator: 'equal',\n    condition: 200\n  }]\n}\n```\n\n### Example\n```\n<request-condition-editor condition=\"{{condition}}\"></request-condition-editor>\n```\n\n### Styling\n`<request-condition-editor>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--request-condition-editor` | Mixin applied to the element | `{}`\n`--request-condition-editor-background-color` | Background color of the editor | `#fff`\n`--inline-fom-action-icon-color` | Color of the delete icon | `rgba(0, 0, 0, 0.74)`\n`--inline-fom-action-icon-color-hover` | Color of the delete icon when hovering | `--accent-color` or `rgba(0, 0, 0, 0.74)`",
      "summary": "",
      "path": "request-condition-editor.js",
      "properties": [
        {
          "name": "condition",
          "type": "Object | null | undefined",
          "description": "Definied condition.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 6
            },
            "end": {
              "line": 223,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_conditionChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "source",
          "type": "string | null | undefined",
          "description": "Value computed from the `action.source` property.\nBinded to source input field.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 6
            },
            "end": {
              "line": 228,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "sourceType",
          "type": "string | null | undefined",
          "description": "Value computed from the `action.source` property.\nBinded to source type input field.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 6
            },
            "end": {
              "line": 233,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "sourcePath",
          "type": "string | null | undefined",
          "description": "Value computed from the `action.source` property.\nBinded to path input field.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 6
            },
            "end": {
              "line": 238,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "Renders the editor in read only mode",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 242,
              "column": 6
            },
            "end": {
              "line": 242,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "clear",
          "description": "Clears the path info.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 2
            },
            "end": {
              "line": 254,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_conditionChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 256,
              "column": 2
            },
            "end": {
              "line": 266,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "condition"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_processSource",
          "description": "Sets path info variables when action's source change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 2
            },
            "end": {
              "line": 279,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source",
              "type": "String",
              "description": "Current source of the action."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeSourcePath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 281,
              "column": 2
            },
            "end": {
              "line": 295,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            },
            {
              "name": "sourceType"
            },
            {
              "name": "sourcePath"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "remove",
          "description": "Dispatches the `remove-action-item` custom event so the panel can remove\nthe item from the list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 2
            },
            "end": {
              "line": 304,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computePathHidden",
          "description": "Computes if path input should be hidden.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 306,
              "column": 2
            },
            "end": {
              "line": 308,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "sourceType"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 120,
          "column": 0
        },
        "end": {
          "line": 314,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "UiElements.RequestConditionEditor",
      "attributes": [
        {
          "name": "condition",
          "description": "Definied condition.",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 6
            },
            "end": {
              "line": 223,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "source",
          "description": "Value computed from the `action.source` property.\nBinded to source input field.",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 6
            },
            "end": {
              "line": 228,
              "column": 20
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "source-type",
          "description": "Value computed from the `action.source` property.\nBinded to source type input field.",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 6
            },
            "end": {
              "line": 233,
              "column": 24
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "source-path",
          "description": "Value computed from the `action.source` property.\nBinded to path input field.",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 6
            },
            "end": {
              "line": 238,
              "column": 24
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "readonly",
          "description": "Renders the editor in read only mode",
          "sourceRange": {
            "start": {
              "line": 242,
              "column": 6
            },
            "end": {
              "line": 242,
              "column": 23
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "remove-condition-item",
          "description": "Non bubbling event notifying parent element that this condition is\nto be deleted.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "condition-changed",
          "description": "Fired when the `condition` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "request-condition-editor"
    },
    {
      "description": "An editor for response iterator.\n\nIt creates data model that is accetable in ARC elements ecosystem for creating iteration over a value (JSON, XML).\n\nActions runner use this information to iterate over iterable objects like arrays or JS object.\nOnce it finds the match it returns the entire object to the action runner and\nit takes the value from this object.\n\n### Data model\n\nCondition data model is:\n\n```javascript\n{\n   source: 'String', // See below for detailed description.\n   operator: 'String', // see below for list of all operators\n   condition: 'any' // value to use to compare the value get from the `source` property\n}\n```\n\n#### source\n\nPath to the data. The iterable should be marked with `*` character.\n\n#### operator\n\nOperator can be one of:\n- equal\n- not-equal\n- greater-than\n- greater-than-equal\n- less-than\n- less-than-equal\n- contains\n- regexp\n\nContains can operate on strings, simple arrays (e.g. `['test', 123]`) or objects (e.g. {'key':'value'}).\n\n### Examples\n\n__Getting value from the same object.__\n\n```javascript\n// Action configuration\nconst config = {\n   source: 'id',\n   action: 'assign-variable',\n   destination: 'personId',\n   iterator: {\n     source: 'items.*.name',\n     operator: 'equal',\n     condition: 'Smith'\n   }\n }\n // Response\n const response = {\n   items: [{\n     id: 1234,\n     name: 'Brown'\n   }, {\n     id: 5678,\n     name: 'Smith'\n   }]\n }\n```\nResult of the above model would result with assigning `5678` to `personId` variable.\n\n__Getting value from nested object.__\n\n```javascript\n// Action configuration\nconst config = {\n   source: 'address.zip',\n   action: 'assign-variable',\n   destination: 'personZip',\n   iterator: {\n     source: 'items.*.name',\n     operator: 'equal',\n     condition: 'Brown'\n   }\n}\n// Response\nconst response = {\n   items: [{\n     id: 1234,\n     name: 'Brown',\n     address: {\n       zip: 94101\n     }\n   }, {\n     id: 5678,\n     name: 'Smith',\n     address: {\n       zip: 94104\n     }\n   }]\n}\n```\n\nResult of the above model would result with assigning `94101` to `personZip` variable.\n\n### Styling\n\n`<request-action-iterator-editor>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--request-action-iterator-editor` | Mixin applied to the element | `{}`\n`--request-action-iterator-editor-background-color` | Background color of the editor | `#fff`",
      "summary": "",
      "path": "request-action-iterator-editor.js",
      "properties": [
        {
          "name": "iterator",
          "type": "Object | null | undefined",
          "description": "Model for iterator.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 6
            },
            "end": {
              "line": 202,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "Renders the editor in read only mode",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 6
            },
            "end": {
              "line": 206,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 137,
          "column": 0
        },
        "end": {
          "line": 209,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "UiElements.RequestActionIteratorEditor",
      "attributes": [
        {
          "name": "iterator",
          "description": "Model for iterator.",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 6
            },
            "end": {
              "line": 202,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "readonly",
          "description": "Renders the editor in read only mode",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 6
            },
            "end": {
              "line": 206,
              "column": 23
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "iterator-changed",
          "description": "Fired when the `iterator` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "request-action-iterator-editor"
    },
    {
      "description": "Request action editor. Allows to build data model for request action using convinient UI.\n\n## Element use example\n\n```\n<request-action-editor action=\"{{action}}\" opened></request-action-editor>\n```\n\n## Action data model\n\nAction can be defined using following properties:\n\n| Property | Type | Description |\n| ----- | ----- | ----- |\n| source | `String` | Source of the data to extract from the request or response object. See below this table for detailed description. |\n| action | `String` | Action to perform. Currently supported are: `assign-variable` -updates variable value in memory, without storing them to the datastore; `store-variable` - updates and stores variable value in the datastore.\n| destination | `String` | For variables manipulation it is the variable name. |\n| enabled | `Boolean` | If sent to false then the action is ignored. |\n\n### Source option and data path\n\nWith source string you can instruct the runner from where to take the value for\naction. General structure is:\n\n```\nsource object . data type [. pRequest action editor. Allows to build data model for request action using\nconvinient UI.\n\n## Element use example\n\n```\n<request-action-editor action=\"{{action}}\" opened></request-action-editor>\n```\n\n## Action data model\n\nAction can be defined using following properties:\n\n| Property | Type | Description |\n| ----- | ----- | ----- |\n| source | `String` | Source of the data to extract from the request or response object. See below this table for detailed description. |\n| action | `String` | Action to perform. Currently supported are: `assign-variable` -updates variable value in memory, without storing them to the datastore; `store-variable` - updates and stores variable value in the datastore.\n| destination | `String` | For variables manipulation it is the variable name. |\n| enabled | `Boolean` | If sent to false then the action is ignored. |\n\n### Source option and data path\n\nWith source string you can instruct the runner from where to take the value for\naction. General structureath]\n```\n\nSource object can be either `request` or `response`.\n\nData type describes type of the request / response data. Can be one of:\n- url - URL associated with the request / response\n- status - Only for response data source object. Response's status code.\n- header - Request / response headers\n- body - Request / response body\n\nPath allows to instruct the runner from where specifically in the data type get the value.\n\nFor `url` you can define the following properties:\n- host - Returns the host value, e.g. `api.domain.com`\n- protocol - Returns URL protocol, e.g. `https:`\n- path - URL's path, e.g. `/path/to/resource.json`\n- query - Returns full query string, e.g. `version=1&page=test`\n- query.[any string] - Returns the value of a query parameter. For `query.version` it would return `1`\n- hash - Returns everything that is after the `#` character, e.g. `access_token=token&state=A6RT7W`\n- hast.[any string] - It treats hash as a query parameters and returns the value of the parameter. For `hash.access_token` it would return `token`\n\nFor `body` you can define path to the value for XML and JSON data only.\nAny other content type will result with `undefined` value.\n\nPath to the data is a JSON path to the value (also for XML).\n\n```javascript\nconst json = {\n  property: {\n    otherProperty: {\n      value: 123456\n    }\n  }\n};\nconst path = 'property.otherProperty.value';\n// This will return 123456\n```\n\nTo access array values put the index in the path:\n\n```javascript\nconst json = {\n  items: [{\n    otherProperty: {\n      value: 123456\n    }\n  }]\n};\nconst path = 'items.0.otherProperty.value';\n// This will return 123456\n```\n\nSimilar for XML:\n\n```javascript\nconst xmlStr = `<?xml version=\"1.0\"?>\n<people xmlns:xul=\"some.xul\">\n  <person db-id=\"test1\">\n    <name first=\"george\" last=\"bush\" />\n    <address street=\"1600 pennsylvania avenue\" city=\"washington\" country=\"usa\"/>\n    <phoneNumber>202-456-1111</phoneNumber>\n  </person>\n  <person db-id=\"test2\">\n    <name first=\"tony\" last=\"blair\" />\n    <address street=\"10 downing street\" city=\"london\" country=\"uk\"/>\n    <phoneNumber>020 7925 0918</phoneNumber>\n  </person>\n</people>`;\npath = 'people.person.0.phoneNumber';\n// returns 202-456-1111\n```\n\nXML path supports `attr(ATTRIBUTE NAME)` function that returns the value of the\nattribute:\n\n```javascript\npath = 'people.person.0.name.attr(first)';\n// returns george\n```\n\n## Conditions\n\nYou can add a condition to the action so the action will be executed if all conditions are meet.\n\nCondition data model is:\n```javascript\n{\n  source: 'String', // the same as for action\n  operator: 'String', // see below for list of all operators\n  condition: 'any', // value to use to compare the value get from the action `source` property\n  enabled: 'Boolean' // false to ignore the condition.\n}\n```\n\nOperator can be one of:\n- equal\n- not-equal\n- greater-than\n- greater-than-equal\n- less-than\n- less-than-equal\n- contains\n\nContains can operate on strings, simple arrays (e.g. `['test', 123]`) or objects (e.g. {'key':'value'}).\n\n### Example\n\n```javascript\nconst config = {\n  source: 'request.body.items.0.name',\n  action: 'assign-variable',\n  destination: 'someValue',\n  enabled: true,\n  conditions: [{\n    source: 'response.status',\n    operator: 'equal',\n    condition: 200,\n    enabled: true\n  }]\n}\n```\n\n### Styling\n`<request-action-editor>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--request-action-editor` | Mixin applied to the element | `{}`\n`--request-action-editor-closed-bar-height` | Height of the item when collapsed. | `48px`\n`--request-action-editor-closed-info-color` | Color of the collapsed info label | `rgba(0, 0, 0, 0.87)`",
      "summary": "",
      "path": "request-action-editor.js",
      "properties": [
        {
          "name": "action",
          "type": "Object | null | undefined",
          "description": "Definied action.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 391,
              "column": 6
            },
            "end": {
              "line": 395,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_actionChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "source",
          "type": "string | null | undefined",
          "description": "Value computed from the `action.source` property.\nBinded to source input field.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 6
            },
            "end": {
              "line": 400,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "sourceType",
          "type": "string | null | undefined",
          "description": "Value computed from the `action.source` property.\nBinded to source type input field.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 405,
              "column": 6
            },
            "end": {
              "line": 405,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "sourcePath",
          "type": "string | null | undefined",
          "description": "Value computed from the `action.source` property.\nBinded to path input field.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 410,
              "column": 6
            },
            "end": {
              "line": 410,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "variablesSuggestions",
          "type": "Array | null | undefined",
          "description": "List of variables sugesstions to display in the combo box.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 414,
              "column": 6
            },
            "end": {
              "line": 414,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "opened",
          "type": "boolean | null | undefined",
          "description": "True to open the editor view.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 418,
              "column": 6
            },
            "end": {
              "line": 421,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_renderIterator",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 422,
              "column": 6
            },
            "end": {
              "line": 425,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "Renders the editor in read only mode",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 429,
              "column": 6
            },
            "end": {
              "line": 429,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "clear",
          "description": "Clears the path info.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 441,
              "column": 2
            },
            "end": {
              "line": 445,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_actionChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 447,
              "column": 2
            },
            "end": {
              "line": 457,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "action"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_processSource",
          "description": "Sets path info variables when action's source change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 462,
              "column": 2
            },
            "end": {
              "line": 470,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source",
              "type": "String",
              "description": "Current source of the action."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeSourcePath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 472,
              "column": 2
            },
            "end": {
              "line": 490,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            },
            {
              "name": "sourceType"
            },
            {
              "name": "sourcePath"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "remove",
          "description": "Dispatches the `remove-action-item` custom event so the panel can remove\nthe item from the list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 495,
              "column": 2
            },
            "end": {
              "line": 499,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computePathHidden",
          "description": "Computes if path input should be hidden.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 501,
              "column": 2
            },
            "end": {
              "line": 503,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "sourceType"
            }
          ]
        },
        {
          "name": "_appendCondition",
          "description": "Handler for add condition button click.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 505,
              "column": 2
            },
            "end": {
              "line": 507,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "addCondition",
          "description": "Adds a condition to conditions list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 513,
              "column": 2
            },
            "end": {
              "line": 532,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opts",
              "type": "?Object",
              "description": "Optional model properties for the condition."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removeCondition",
          "description": "Handles delete of the condition.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 537,
              "column": 2
            },
            "end": {
              "line": 540,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeActionStateLabel",
          "description": "Computes label for the action state enabler toggle button.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 542,
              "column": 2
            },
            "end": {
              "line": 544,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "enabled"
            }
          ]
        },
        {
          "name": "_computeIteratorStateLabel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 545,
              "column": 2
            },
            "end": {
              "line": 547,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "enabled"
            }
          ]
        },
        {
          "name": "_computeToglePanelLabel",
          "description": "Computes label for toggle editor state button.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 549,
              "column": 2
            },
            "end": {
              "line": 551,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opened"
            }
          ]
        },
        {
          "name": "toggleOpened",
          "description": "Toggles opened state of the editor.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 555,
              "column": 2
            },
            "end": {
              "line": 557,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeActionLabel",
          "description": "Computes label for the action lable when collapsed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 563,
              "column": 2
            },
            "end": {
              "line": 565,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "action",
              "type": "String",
              "description": "Currently selected action."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Label for the action id."
          }
        },
        {
          "name": "_hasIteratorChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 567,
              "column": 2
            },
            "end": {
              "line": 579,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "enabled"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeRenderIterator",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 581,
              "column": 2
            },
            "end": {
              "line": 586,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            },
            {
              "name": "sourceType"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 214,
          "column": 0
        },
        "end": {
          "line": 597,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "UiElements.RequestActionEditor",
      "attributes": [
        {
          "name": "action",
          "description": "Definied action.",
          "sourceRange": {
            "start": {
              "line": 391,
              "column": 6
            },
            "end": {
              "line": 395,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "source",
          "description": "Value computed from the `action.source` property.\nBinded to source input field.",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 6
            },
            "end": {
              "line": 400,
              "column": 20
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "source-type",
          "description": "Value computed from the `action.source` property.\nBinded to source type input field.",
          "sourceRange": {
            "start": {
              "line": 405,
              "column": 6
            },
            "end": {
              "line": 405,
              "column": 24
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "source-path",
          "description": "Value computed from the `action.source` property.\nBinded to path input field.",
          "sourceRange": {
            "start": {
              "line": 410,
              "column": 6
            },
            "end": {
              "line": 410,
              "column": 24
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "variables-suggestions",
          "description": "List of variables sugesstions to display in the combo box.",
          "sourceRange": {
            "start": {
              "line": 414,
              "column": 6
            },
            "end": {
              "line": 414,
              "column": 33
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "opened",
          "description": "True to open the editor view.",
          "sourceRange": {
            "start": {
              "line": 418,
              "column": 6
            },
            "end": {
              "line": 421,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "readonly",
          "description": "Renders the editor in read only mode",
          "sourceRange": {
            "start": {
              "line": 429,
              "column": 6
            },
            "end": {
              "line": 429,
              "column": 23
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "action-changed",
          "description": "Fired when the `action` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "request-action-editor"
    },
    {
      "description": "Variable editor allows to edit variables in actions editor.\n\n### Styling\n\n`<request-variable-editor>` provides the following custom properties and\nmixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--request-variable-editor` | Mixin applied to the element | `{}`",
      "summary": "",
      "path": "request-variable-editor.js",
      "properties": [
        {
          "name": "action",
          "type": "Object | null | undefined",
          "description": "Definied action.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 6
            },
            "end": {
              "line": 79,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "variablesSuggestions",
          "type": "Array | null | undefined",
          "description": "List of variables sugesstions to display in the combo box.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "Renders the editor in read only mode",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 6
            },
            "end": {
              "line": 87,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "remove",
          "description": "Dispatches the `remove-action-item` custom event so the panel can remove\nthe item from the list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 2
            },
            "end": {
              "line": 98,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 38,
          "column": 0
        },
        "end": {
          "line": 104,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "UiElements.RequestVariableEditor",
      "attributes": [
        {
          "name": "action",
          "description": "Definied action.",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 6
            },
            "end": {
              "line": 79,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "variables-suggestions",
          "description": "List of variables sugesstions to display in the combo box.",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 33
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "readonly",
          "description": "Renders the editor in read only mode",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 6
            },
            "end": {
              "line": 87,
              "column": 23
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "remove-action-item",
          "description": "Dispatched when the user requested to remove the item.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "action-changed",
          "description": "Fired when the `action` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "request-variable-editor"
    },
    {
      "description": "A panel to create and edit request actions.\n\n### Example\n\n```html\n<request-actions-panel actions=\"{{requestActions}}\"></request-actions-panel>\n```\n\n## Action data model\n\nAction can be defined using following properties:\n\n**source** (`String`)\n\nSource of the data to extract from the request or response object. See section\nbelow for detailed description.\n\n**action** (`String`)\n\nAction to perform. Currently supported are: `assign-variable` - updates\nvariable value in memory, without storing them to the datastore;\n`store-variable` - updates and stores variable value in the datastore.\n\n\n**destination** (`String`)\n\nFor variables manipulation it is the variable name.\n\n\n**enabled** (`Boolean`)\n\nIf sent to false then the action is ignored.\n\n### Source option and data path\n\nWith source string you can instruct the runner from where to take the value for\naction. General structure is:\n\n```\nsource object . data type [. path]\n```\n\nSource object can be either `request` or `response`.\n\nData type describes type of the request / response data. Can be one of:\n- url - URL associated with the request / response\n- status - Only for response data source object. Response's status code.\n- header - Request / response headers\n- body - Request / response body\n\nPath allows to instruct the runner from where specifically in the data type get the value.\n\nFor `url` you can define the following properties:\n- host - Returns the host value, e.g. `api.domain.com`\n- protocol - Returns URL protocol, e.g. `https:`\n- path - URL's path, e.g. `/path/to/resource.json`\n- query - Returns full query string, e.g. `version=1&page=test`\n- query.[any string] - Returns the value of a query parameter. For\n`query.version` it would return `1`\n- hash - Returns everything that is after the `#` character, e.g.\n`access_token=token&state=A6RT7W`\n- hast.[any string] - It treats hash as a query parameters and returns\nthe value of the parameter. For `hash.access_token` it would return `token`\n\nFor `body` you can define path to the value for XML and JSON data only.\nAny other content type will result with `undefined` value.\n\nPath to the data is a JSON path to the value (also for XML).\n\n```javascript\nconst json = {\n  property: {\n    otherProperty: {\n      value: 123456\n    }\n  }\n};\nconst path = 'property.otherProperty.value';\n// This will return 123456\n```\n\nTo access array values put the index in the path:\n\n```javascript\nconst json = {\n  items: [{\n    otherProperty: {\n      value: 123456\n    }\n  }]\n};\nconst path = 'items.0.otherProperty.value';\n// This will return 123456\n```\n\nSimilar for XML:\n\n```javascript\nconst xmlStr = `<?xml version=\"1.0\"?>\n<people xmlns:xul=\"some.xul\">\n  <person db-id=\"test1\">\n    <name first=\"george\" last=\"bush\" />\n    <address street=\"1600 pennsylvania avenue\" city=\"washington\" country=\"usa\"/>\n    <phoneNumber>202-456-1111</phoneNumber>\n  </person>\n  <person db-id=\"test2\">\n    <name first=\"tony\" last=\"blair\" />\n    <address street=\"10 downing street\" city=\"london\" country=\"uk\"/>\n    <phoneNumber>020 7925 0918</phoneNumber>\n  </person>\n</people>`;\npath = 'people.person.0.phoneNumber';\n// returns 202-456-1111\n```\n\nXML path supports `attr(ATTRIBUTE NAME)` function that returns the value of the\nattribute:\n\n```javascript\npath = 'people.person.0.name.attr(first)';\n// returns george\n```\n\n## Conditions\n\nYou can add a condition to the action so the action will be executed if all conditions are meet.\n\nCondition data model is:\n```javascript\n{\n  source: 'String', // the same as for action\n  operator: 'String', // see below for list of all operators\n  condition: 'any', // value to use to compare the value get from the action `source` property\n  enabled: 'Boolean' // false to ignore the condition.\n}\n```\n\nOperator can be one of:\n- equal\n- not-equal\n- greater-than\n- greater-than-equal\n- less-than\n- less-than-equal\n- contains\n\nContains can operate on strings, simple arrays (e.g. `['test', 123]`)\nor objects (e.g. {'key':'value'}).\n\n### Example\n\n```javascript\nconst config = {\n  source: 'request.body.items.0.name',\n  action: 'assign-variable',\n  destination: 'someValue',\n  enabled: true,\n  conditions: [{\n    source: 'response.status',\n    operator: 'equal',\n    condition: 200,\n    enabled: true\n  }]\n}\n```\n\n## Iterables\n\nValue for action can be extracted from the response body after iteraiting over\niterable data types (array, object). In this case action's `source` property\nshould be relative to the object that matches ierator definition.\n\nIterables can be mixed with conditions. Conditions are checked first, before\naction is performed.\n\n### Example\n\nGetting value from the same object.\n\n```javascript\n// Action configuration\nconst config = {\n  source: 'id',\n  action: 'assign-variable',\n  destination: 'personId',\n  iterator: {\n    source: 'items.*.name',\n    operator: 'equal',\n    condition: 'Smith'\n  }\n}\n// Response\nconst response = {\n  items: [{\n    id: 1234,\n    name: 'Brown'\n  }, {\n    id: 5678,\n    name: 'Smith'\n  }]\n}\n```\nResult of the above model would result with assigning `5678` to `personId` variable.\n\n### Styling\n\n`<request-actions-panel>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--request-actions-panel` | Mixin applied to the element | `{}`\n`--request-actions-panel-title` | Mixin applied to the title element. | `{}`\n`--request-actions-panel-empty-screen-color` | Color of the empty screen | `#707070`",
      "summary": "",
      "path": "request-actions-panel.js",
      "properties": [
        {
          "name": "afterActions",
          "type": "Array | null | undefined",
          "description": "Model for actions to be preformed after the request",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 357,
              "column": 6
            },
            "end": {
              "line": 361,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_afterActionsChanged\"",
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "beforeActions",
          "type": "Array | null | undefined",
          "description": "Model for actions to be preformed before the request",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 365,
              "column": 6
            },
            "end": {
              "line": 369,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_beforeActionsChanged\"",
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "hasPostActions",
          "type": "boolean | null | undefined",
          "description": "If true then the panel has actions defined.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 6
            },
            "end": {
              "line": 377,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "hasPreActions",
          "type": "boolean | null | undefined",
          "description": "If true then the panel has pre-actions defined.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 381,
              "column": 6
            },
            "end": {
              "line": 385,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "hasActions",
          "type": "boolean | null | undefined",
          "description": "Indicates if any action has been defined for this request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 389,
              "column": 6
            },
            "end": {
              "line": 392,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "Renders the editor in read only mode",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 396,
              "column": 6
            },
            "end": {
              "line": 396,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_variables",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 6
            },
            "end": {
              "line": 401,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_seekHelp",
          "description": "Opens documentation page for the module.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 411,
              "column": 2
            },
            "end": {
              "line": 427,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "(Window | undefined)",
            "desc": "reference to newly created window if not\nhandled by `open-external-url` event."
          }
        },
        {
          "name": "_afterActionsChanged",
          "description": "Computes value for `hasPostActions` based on post actions.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 432,
              "column": 2
            },
            "end": {
              "line": 435,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(Array | undefined)",
              "description": "Current post actions"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_beforeActionsChanged",
          "description": "Computes value for `hasPreActions` based on pre actions.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 440,
              "column": 2
            },
            "end": {
              "line": 443,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(Array | undefined)",
              "description": "Current pre actions"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeHasActions",
          "description": "Computes value for `hasActions` propety.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 451,
              "column": 2
            },
            "end": {
              "line": 453,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hasPostActions",
              "type": "Boolean",
              "description": "Current value of hasPostActions"
            },
            {
              "name": "hasPreActions",
              "type": "Boolean",
              "description": "Current value of hasPreActions"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if any action is defined."
          }
        },
        {
          "name": "_addPostActionHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 455,
              "column": 2
            },
            "end": {
              "line": 457,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addPreActionHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 459,
              "column": 2
            },
            "end": {
              "line": 461,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "addPostAction",
          "description": "Adds a post action to the UI.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 466,
              "column": 2
            },
            "end": {
              "line": 482,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opts",
              "type": "?Object",
              "description": "Default values for model."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "addPreAction",
          "description": "Adds a pre action to the UI",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 488,
              "column": 2
            },
            "end": {
              "line": 510,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opts",
              "type": "?Object",
              "description": "Default values for model."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removePostItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 512,
              "column": 2
            },
            "end": {
              "line": 518,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removePreItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 520,
              "column": 2
            },
            "end": {
              "line": 526,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_processVariables",
          "description": "Filters out variables that can't be used in the editor and returns\na list of variable names.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 534,
              "column": 2
            },
            "end": {
              "line": 547,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record",
              "type": "Object",
              "description": "Change record for variables"
            }
          ],
          "return": {
            "type": "Array.<String>",
            "desc": "List of filtered variable names."
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 243,
          "column": 0
        },
        "end": {
          "line": 548,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "UiElements.RequestActionsPanel",
      "attributes": [
        {
          "name": "after-actions",
          "description": "Model for actions to be preformed after the request",
          "sourceRange": {
            "start": {
              "line": 357,
              "column": 6
            },
            "end": {
              "line": 361,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "before-actions",
          "description": "Model for actions to be preformed before the request",
          "sourceRange": {
            "start": {
              "line": 365,
              "column": 6
            },
            "end": {
              "line": 369,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "has-post-actions",
          "description": "If true then the panel has actions defined.",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 6
            },
            "end": {
              "line": 377,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "has-pre-actions",
          "description": "If true then the panel has pre-actions defined.",
          "sourceRange": {
            "start": {
              "line": 381,
              "column": 6
            },
            "end": {
              "line": 385,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "has-actions",
          "description": "Indicates if any action has been defined for this request.",
          "sourceRange": {
            "start": {
              "line": 389,
              "column": 6
            },
            "end": {
              "line": 392,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "readonly",
          "description": "Renders the editor in read only mode",
          "sourceRange": {
            "start": {
              "line": 396,
              "column": 6
            },
            "end": {
              "line": 396,
              "column": 23
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "after-actions-changed",
          "description": "Fired when the `afterActions` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "before-actions-changed",
          "description": "Fired when the `beforeActions` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "request-actions-panel",
      "mixins": [
        "VariablesConsumerMixin"
      ]
    }
  ]
}
