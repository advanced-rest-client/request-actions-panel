/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   request-action-editor.html
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../iron-flex-layout/iron-flex-layout.d.ts" />
/// <reference path="../arc-icons/arc-icons.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />
/// <reference path="../paper-input/paper-input.d.ts" />
/// <reference path="../paper-toggle-button/paper-toggle-button.d.ts" />
/// <reference path="../paper-dropdown-menu/paper-dropdown-menu-light.d.ts" />
/// <reference path="../paper-listbox/paper-listbox.d.ts" />
/// <reference path="../paper-item/paper-item.d.ts" />
/// <reference path="../paper-combobox/paper-combobox.d.ts" />
/// <reference path="../iron-collapse/iron-collapse.d.ts" />
/// <reference path="../paper-styles/shadow.d.ts" />
/// <reference path="request-condition-editor.d.ts" />
/// <reference path="request-action-iterator-editor.d.ts" />

declare namespace UiElements {

  /**
   * Request action editor. Allows to build data model for request action using convinient UI.
   *
   * ## Element use example
   *
   * ```
   * <request-action-editor action="{{action}}" opened></request-action-editor>
   * ```
   *
   * ## Action data model
   *
   * Action can be defined using following properties:
   *
   * | Property | Type | Description |
   * | ----- | ----- | ----- |
   * | source | `String` | Source of the data to extract from the request or response object. See below this table for detailed description. |
   * | action | `String` | Action to perform. Currently supported are: `assign-variable` -updates variable value in memory, without storing them to the datastore; `store-variable` - updates and stores variable value in the datastore.
   * | destination | `String` | For variables manipulation it is the variable name. |
   * | enabled | `Boolean` | If sent to false then the action is ignored. |
   *
   * ### Source option and data path
   *
   * With source string you can instruct the runner from where to take the value for
   * action. General structure is:
   *
   * ```
   * source object . data type [. pRequest action editor. Allows to build data model for request action using
   * convinient UI.
   *
   * ## Element use example
   *
   * ```
   * <request-action-editor action="{{action}}" opened></request-action-editor>
   * ```
   *
   * ## Action data model
   *
   * Action can be defined using following properties:
   *
   * | Property | Type | Description |
   * | ----- | ----- | ----- |
   * | source | `String` | Source of the data to extract from the request or response object. See below this table for detailed description. |
   * | action | `String` | Action to perform. Currently supported are: `assign-variable` -updates variable value in memory, without storing them to the datastore; `store-variable` - updates and stores variable value in the datastore.
   * | destination | `String` | For variables manipulation it is the variable name. |
   * | enabled | `Boolean` | If sent to false then the action is ignored. |
   *
   * ### Source option and data path
   *
   * With source string you can instruct the runner from where to take the value for
   * action. General structureath]
   * ```
   *
   * Source object can be either `request` or `response`.
   *
   * Data type describes type of the request / response data. Can be one of:
   * - url - URL associated with the request / response
   * - status - Only for response data source object. Response's status code.
   * - header - Request / response headers
   * - body - Request / response body
   *
   * Path allows to instruct the runner from where specifically in the data type get the value.
   *
   * For `url` you can define the following properties:
   * - host - Returns the host value, e.g. `api.domain.com`
   * - protocol - Returns URL protocol, e.g. `https:`
   * - path - URL's path, e.g. `/path/to/resource.json`
   * - query - Returns full query string, e.g. `version=1&page=test`
   * - query.[any string] - Returns the value of a query parameter. For `query.version` it would return `1`
   * - hash - Returns everything that is after the `#` character, e.g. `access_token=token&state=A6RT7W`
   * - hast.[any string] - It treats hash as a query parameters and returns the value of the parameter. For `hash.access_token` it would return `token`
   *
   * For `body` you can define path to the value for XML and JSON data only.
   * Any other content type will result with `undefined` value.
   *
   * Path to the data is a JSON path to the value (also for XML).
   *
   * ```javascript
   * const json = {
   *   property: {
   *     otherProperty: {
   *       value: 123456
   *     }
   *   }
   * };
   * const path = 'property.otherProperty.value';
   * // This will return 123456
   * ```
   *
   * To access array values put the index in the path:
   *
   * ```javascript
   * const json = {
   *   items: [{
   *     otherProperty: {
   *       value: 123456
   *     }
   *   }]
   * };
   * const path = 'items.0.otherProperty.value';
   * // This will return 123456
   * ```
   *
   * Similar for XML:
   *
   * ```javascript
   * const xmlStr = `<?xml version="1.0"?>
   * <people xmlns:xul="some.xul">
   *   <person db-id="test1">
   *     <name first="george" last="bush" />
   *     <address street="1600 pennsylvania avenue" city="washington" country="usa"/>
   *     <phoneNumber>202-456-1111</phoneNumber>
   *   </person>
   *   <person db-id="test2">
   *     <name first="tony" last="blair" />
   *     <address street="10 downing street" city="london" country="uk"/>
   *     <phoneNumber>020 7925 0918</phoneNumber>
   *   </person>
   * </people>`;
   * path = 'people.person.0.phoneNumber';
   * // returns 202-456-1111
   * ```
   *
   * XML path supports `attr(ATTRIBUTE NAME)` function that returns the value of the
   * attribute:
   *
   * ```javascript
   * path = 'people.person.0.name.attr(first)';
   * // returns george
   * ```
   *
   * ## Conditions
   *
   * You can add a condition to the action so the action will be executed if all conditions are meet.
   *
   * Condition data model is:
   * ```javascript
   * {
   *   source: 'String', // the same as for action
   *   operator: 'String', // see below for list of all operators
   *   condition: 'any', // value to use to compare the value get from the action `source` property
   *   enabled: 'Boolean' // false to ignore the condition.
   * }
   * ```
   *
   * Operator can be one of:
   * - equal
   * - not-equal
   * - greater-than
   * - greater-than-equal
   * - less-than
   * - less-than-equal
   * - contains
   *
   * Contains can operate on strings, simple arrays (e.g. `['test', 123]`) or objects (e.g. {'key':'value'}).
   *
   * ### Example
   *
   * ```javascript
   * const config = {
   *   source: 'request.body.items.0.name',
   *   action: 'assign-variable',
   *   destination: 'someValue',
   *   enabled: true,
   *   conditions: [{
   *     source: 'response.status',
   *     operator: 'equal',
   *     condition: 200,
   *     enabled: true
   *   }]
   * }
   * ```
   *
   * ### Styling
   * `<request-action-editor>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--request-action-editor` | Mixin applied to the element | `{}`
   * `--request-action-editor-closed-bar-height` | Height of the item when collapsed. | `48px`
   * `--request-action-editor-closed-info-color` | Color of the collapsed info label | `rgba(0, 0, 0, 0.87)`
   */
  class RequestActionEditor extends Polymer.Element {

    /**
     * Definied action.
     */
    action: object|null|undefined;

    /**
     * Value computed from the `action.source` property.
     * Binded to source input field.
     */
    source: string|null|undefined;

    /**
     * Value computed from the `action.source` property.
     * Binded to source type input field.
     */
    sourceType: string|null|undefined;

    /**
     * Value computed from the `action.source` property.
     * Binded to path input field.
     */
    sourcePath: string|null|undefined;

    /**
     * List of variables sugesstions to display in the combo box.
     */
    variablesSuggestions: any[]|null|undefined;

    /**
     * True to open the editor view.
     */
    opened: boolean|null|undefined;
    readonly _renderIterator: boolean|null|undefined;

    /**
     * Renders the editor in read only mode
     */
    readonly: boolean|null|undefined;

    /**
     * Clears the path info.
     */
    clear(): void;
    _actionChanged(action: any): void;

    /**
     * Sets path info variables when action's source change.
     *
     * @param source Current source of the action.
     */
    _processSource(source: String|null): void;
    _computeSourcePath(source: any, sourceType: any, sourcePath: any): void;

    /**
     * Dispatches the `remove-action-item` custom event so the panel can remove
     * the item from the list.
     */
    remove(): void;

    /**
     * Computes if path input should be hidden.
     */
    _computePathHidden(sourceType: any): any;

    /**
     * Handler for add condition button click.
     */
    _appendCondition(): void;

    /**
     * Adds a condition to conditions list.
     *
     * @param opts Optional model properties for the condition.
     */
    addCondition(opts: object|null): void;

    /**
     * Handles delete of the condition.
     */
    _removeCondition(e: CustomEvent|null): void;

    /**
     * Computes label for the action state enabler toggle button.
     */
    _computeActionStateLabel(enabled: any): any;
    _computeIteratorStateLabel(enabled: any): any;

    /**
     * Computes label for toggle editor state button.
     */
    _computeToglePanelLabel(opened: any): any;

    /**
     * Toggles opened state of the editor.
     */
    toggleOpened(): void;

    /**
     * Computes label for the action lable when collapsed.
     *
     * @param action Currently selected action.
     * @returns Label for the action id.
     */
    _computeActionLabel(action: String|null): String|null;
    _hasIteratorChanged(enabled: any): void;
    _computeRenderIterator(source: any, sourceType: any): any;
  }
}

interface HTMLElementTagNameMap {
  "request-action-editor": UiElements.RequestActionEditor;
}
